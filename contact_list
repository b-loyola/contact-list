#!/usr/bin/env ruby

require_relative 'contact'
require 'byebug'

# Interfaces between a user and their contact list. Reads from and writes to standard I/O.
class ContactList

	attr_accessor :contacts

  # Implement user interaction. This should be the only file where you use `puts` and `gets`.

  def list_all
  	list(Contact.all)
	end

	def list(contacts_to_list)
		contacts_to_list.each_with_index do |contact,index|
			if index % 5 == 4
				puts "#{contact.id}: #{contact.name} (#{contact.email})"
				print "*** Press enter to continue... ***"
				STDIN.gets.chomp
			else
				puts "#{contact.id}: #{contact.name} (#{contact.email})"
			end
		end
		puts "---"
		puts "#{contacts_to_list.size} contacts total"
	end

	def create_new
		puts "Enter full name:"
		name = STDIN.gets.chomp
		puts "Enter email address:"
		email = STDIN.gets.chomp
		puts "Enter phone types and numbers separated by a space (optional: leave blank to skip)"
		puts "Ex.:"
		puts "work 415-456-9876 home 645-874-0989 mobile 765-987-3478"
		phones = STDIN.gets.chomp
		contact = Contact.create(name, email, phones)
		if contact
			puts "Contact #{contact.name} created successfully with id #{contact.id}!"
		else
			puts "Unable to create contact, please ensure email is unique."
		end
	end

	def show_contact(id)
		unless ARGV[1] =~ /^\d+$/
			puts "Contact ID must be a number!"
			return
		end
		contact = Contact.find(id.to_i)
		if contact
			puts contact
		else
			puts "Contact not found!"
		end
	end

	def search_contact(term)
		found_contacts = Contact.search(term)
		if found_contacts
			list(found_contacts)
		else
			puts "No contacts matched your search criteria!"
		end

	end

end

command = String.new
option = String.new

if ARGV.empty?
	puts "Here is a list of available commands:"
	puts "\tnew    - Create a new contact"
	puts "\tlist   - List all contacts"
	puts "\tshow   - Show a contact"
	puts "\tsearch - Search contacts"
	command, option = gets.chomp.split(' ')
else
	command = ARGV[0]
	option = ARGV[1]
end

case command
when "list"
	ContactList.new.list_all
when "new"
	ContactList.new.create_new
when "show"
	ContactList.new.show_contact(option)
when "search"
	ContactList.new.search_contact(option)
else
	puts "Invalid command"
end
  